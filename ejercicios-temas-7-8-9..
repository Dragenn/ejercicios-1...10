ejercicio #1

public class ReverseString {
    public static void main(String[] args) {
        String originalString = "hola mundo";
        String reversedString = reverseString(originalString);
        System.out.println(reversedString);
    }

    public static String reverseString(String str) {
        StringBuilder reversed = new StringBuilder();
        for (int i = str.length() - 1; i >= 0; i--) {
            reversed.append(str.charAt(i));
        }
        return reversed.toString();
    }
}


ejercicio #2

public class StringArray {
    public static void main(String[] args) {
        // Creando el array unidimensional de String
        String[] array = {"Hola", "mundo", "!", "Mi", "nombre", "es", "Hernando"};

        // Recorriendo y mostrando los valores del array
        for (String value : array) {
            System.out.println(value);
        }
    }
}

ejercicio #3

public class DosDimensionesArray {
    public static void main(String[] args) {
        // Creando el array bidimensional de enteros
        int[][] array = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };

        // Recorriendo y mostrando los valores del array
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array[i].length; j++) {
                System.out.println("Posición [" + i + "][" + j + "]: " + array[i][j]);
            }
        }
    }
}

ejercicio #4

import java.util.ArrayList;

public class Vector {
    public static void main(String[] args) {
        // Creamos un vector utilizando ArrayList
        ArrayList<Integer> vector = new ArrayList<>();

        // Insertamos elementos en el vector
        vector.add(10);
        vector.add(20);
        vector.add(30);
        vector.add(40);
        vector.add(50);

        System.out.println("Vector original: " + vector);

        // Eliminamos el segundo y  tercer elemento
        vector.remove(1); // Eliminar el segundo elemento (índice 1)
        vector.remove(1); // Eliminar el tercer elemento, ahora ocupa la posición 1

        System.out.println("Vector después de eliminar el segundo y tercer elemento: " + vector);
    }
}

ejercicio #5

El problema de utilizar un vector con la capacidad por defecto al insertar 1000 elementos,
 es que puede ocasionar un rendimiento deficiente debido a la reasignación y copia repetitiva de elementos.


Si se insertan 1000 elementos en un vector con capacidad por defecto,
 se realizarán múltiples reasignaciones y copias de los elementos a medida que el vector va creciendo.
 Esto puede ser ineficiente en términos de tiempo y uso de memoria. 

ejercicio #6

import java.util.ArrayList;
import java.util.LinkedList;

public class ListExample {
    public static void main(String[] args) {
        // Creando un ArrayList de tipo String
        ArrayList<String> arrayList = new ArrayList<>();
        arrayList.add("Elemento 1");
        arrayList.add("Elemento 2");
        arrayList.add("Elemento 3");
        arrayList.add("Elemento 4");

        // Copiando el ArrayList en una LinkedList
        LinkedList<String> linkedList = new LinkedList<>(arrayList);

        // Recorriendo y mostrando los valores del ArrayList
        System.out.println("Valores del ArrayList:");
        for (String value : arrayList) {
            System.out.println(value);
        }

        // Recorriendo y mostrando los valores de la LinkedList
        System.out.println("\nValores de la LinkedList:");
        for (String value : linkedList) {
            System.out.println(value);
        }
    }
}

ejercicio #7

import java.util.ArrayList;
import java.util.Iterator;

public class ArrayLista {
    public static void main(String[] args) {
        // Creando el ArrayList de tipo int
        ArrayList<Integer> arrayList = new ArrayList<>();

        // Rellenando el ArrayList con elementos del 1 al 10
        for (int i = 1; i <= 10; i++) {
            arrayList.add(i);
        }

        // Recorriendo y eliminando los números pares del ArrayList
        Iterator<Integer> iterator = arrayList.iterator();
        while (iterator.hasNext()) {
            int number = iterator.next();
            if (number % 2 == 0) {
                iterator.remove();
            }
        }

        // Mostrando el ArrayList final
        System.out.println("ArrayList final:");
        for (int number : arrayList) {
            System.out.println(number);
        }
    }
}


ejercicio #8

public class Main {
    public static void main(String[] args) {
        try {
            DividePorCero();
        } catch (ArithmeticException e) {
            System.out.println("Esto no puede hacerse");
        }
        System.out.println("Demo de Código");
    }

    public static void DividePorCero() throws ArithmeticException {
        throw new ArithmeticException();
    }
}

ejercicio #9

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;

public class FileCopyExample {
    public static void main(String[] args) {
        String inputFile = "input.txt";
        String outputFile = "output.txt";
        copyFile(inputFile, outputFile);
        System.out.println("Copia de archivo completada.");
    }

    public static void copyFile(String fileIn, String fileOut) {
        try (InputStream inputStream = new FileInputStream(fileIn);
             OutputStream outputStream = new FileOutputStream(fileOut);
             PrintStream printStream = new PrintStream(outputStream)) {

            int byteData;
            while ((byteData = inputStream.read()) != -1) {
                printStream.write(byteData);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

ejercicio #10

import java.io.*;
import java.util.*;

public class CalificacionEstudiante {
    public static void main(String[] args) {
        // Creamos un HashMap para almacenar los estudiantes y sus calificaciones
        HashMap<String, Integer> students = new HashMap<>();

        try {
            // Creamos un InputStream para leer la entrada del usuario
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            PrintStream out = System.out;

            while (true) {
                out.println("1. Agregar estudiante");
                out.println("2. Obtener calificación de estudiante");
                out.println("3. Salir");
                out.print("Seleccione una opción: ");

                // Leemos la opción ingresada por el usuario
                int option = Integer.parseInt(reader.readLine());

                if (option == 1) {
                    out.print("Ingrese el nombre del estudiante: ");
                    String name = reader.readLine();

                    out.print("Ingrese la calificación del estudiante: ");
                    int grade = Integer.parseInt(reader.readLine());

                    // Agregamos el estudiante y su calificación al HashMap
                    students.put(name, grade);
                    out.println("Estudiante agregado correctamente.");
                    out.println();
                } else if (option == 2) {
                    out.print("Ingrese el nombre del estudiante: ");
                    String name = reader.readLine();

                    // Obtenemos la calificación del estudiante del HashMap
                    Integer grade = students.get(name);

                    if (grade != null) {
                        out.println("Calificación de " + name + ": " + grade);
                    } else {
                        out.println("No se encontró al estudiante en el sistema.");
                    }
                    out.println();
                } else if (option == 3) {
                    break;
                } else {
                    out.println("Opción inválida. Intente nuevamente.");
                    out.println();
                }
            }
        } catch (IOException e) {
            System.err.println("Error de entrada/salida: " + e.getMessage());
        } catch (NumberFormatException e) {
            System.err.println("Error de formato numérico: " + e.getMessage());
        }
    }
}

